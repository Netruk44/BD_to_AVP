name: Package with Briefcase and Create Release

on:
  push:
    branches:
      - release

jobs:
  package:
    runs-on: macos-latest
    env:
      KEYCHAIN_PATH: $(pwd)/build.keychain
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          poetry install --no-interaction
      - name: Install certificates
        run: |
          rm -f $KEYCHAIN_PATH
          security delete-keychain $KEYCHAIN_PATH || true
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          # Import both certificates
          echo "${{ secrets.APP_CERTIFICATE }}" | base64 --decode > app_certificate.p12
          echo "${{ secrets.INSTALLER_CERTIFICATE }}" | base64 --decode > installer_certificate.p12
          security import app_certificate.p12 -k $KEYCHAIN_PATH -P $CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security import installer_certificate.p12 -k $KEYCHAIN_PATH -P $CERTIFICATE_PASSWORD -T /usr/bin/productbuild
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PATH
      - name: Store Notarization Credentials
        run: |
          echo "${{ secrets.KEYCHAIN_PASSWORD }}" | xcrun altool --store-password-in-keychain-item "${{ secrets.KEYCHAIN_NAME }}" -u "${{ secrets.APPLE_ID }}" -p -
          xcrun notarytool store-credentials "${{ secrets.KEYCHAIN_NAME }}" --apple-id "${{ secrets.APPLE_ID }}" --password "${{ secrets.KEYCHAIN_PASSWORD }}" --team-id "${{ secrets.TEAM_ID }}"
      - name: Extract version
        id: extract_version
        run: |
          echo "::set-output name=version::$(sed -n 's/^version = "\(.*\)"/\1/p' pyproject.toml)"
      - name: Package application for GitHub
        run: |
          poetry run briefcase create
          poetry run briefcase build
          poetry run briefcase package -i "${{ secrets.DEV_ID }}"
      - name: Save logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: build-logs
          path: /Users/runner/work/BD_to_AVP/BD_to_AVP/logs/*.log
      - name: Package application using productbuild
        run: |
          # Assume you already have a build directory containing the app
          productbuild --component build/bd-to-avp/macos/app/Blu-ray\ to\ AVP.app /Applications dist/Blu-ray\ to\ AVP-${{ steps.extract_version.outputs.version }}.pkg --sign "${{ secrets.INSTALLER_ID }}"
      - name: Validate App
        run: |
          xcrun altool --validate-app -f dist/Blu-ray\ to\ AVP-${{ steps.extract_version.outputs.version }}.pkg -t osx -u ${{ secrets.APPLE_ID }} -p ${{ secrets.KEYCHAIN_PASSWORD }} --output-format xml
      - name: Upload App to TestFlight
        run: |
          xcrun altool --upload-app -f dist/Blu-ray\ to\ AVP-${{ steps.extract_version.outputs.version }}.pkg -t osx -u ${{ secrets.APPLE_ID }} -p ${{ secrets.KEYCHAIN_PASSWORD }} --output-format xml
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: true
      - name: Upload Release Asset DMG
        id: upload-release-asset-dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/Blu-ray to AVP-${{ steps.extract_version.outputs.version }}.dmg
          asset_name: Blu-ray to AVP-${{ steps.extract_version.outputs.version }}.dmg
          asset_content_type: application/octet-stream
      - name: Upload Release Asset pkg
        id: upload-release-asset-pkg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/Blu-ray to AVP-${{ steps.extract_version.outputs.version }}.pkg
          asset_name: Blu-ray to AVP-${{ steps.extract_version.outputs.version }}.pkg
          asset_content_type: application/octet-stream
